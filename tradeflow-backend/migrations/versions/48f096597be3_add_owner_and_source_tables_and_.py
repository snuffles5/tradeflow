"""Add owner and source tables and relationships

Revision ID: 48f096597be3
Revises: 5fd644d14eb5
Create Date: 2025-04-09 22:28:52.363660

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import mysql  # Keep dialect import if needed

# revision identifiers, used by Alembic.
revision = "48f096597be3"
down_revision = "5fd644d14eb5"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. Create new tables
    trade_owners_table = op.create_table(
        "trade_owners",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    trade_sources_table = op.create_table(
        "trade_sources",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    source_owner_association_table = op.create_table(
        "source_owner_association",
        sa.Column("source_id", sa.Integer(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        # FK constraints added later
        # sa.ForeignKeyConstraint(['owner_id'], ['trade_owners.id'], ),
        # sa.ForeignKeyConstraint(['source_id'], ['trade_sources.id'], ),
        sa.PrimaryKeyConstraint("source_id", "owner_id"),
    )

    # 2. Add new FK columns as NULLABLE first
    op.add_column("trades", sa.Column("trade_owner_id", sa.Integer(), nullable=True))
    op.add_column("trades", sa.Column("trade_source_id", sa.Integer(), nullable=True))
    op.add_column(
        "unrealized_holdings", sa.Column("trade_owner_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "unrealized_holdings", sa.Column("trade_source_id", sa.Integer(), nullable=True)
    )

    # 3. Populate new tables
    owners = [
        {"id": 1, "name": "Daniel"},
        {"id": 2, "name": "Shachar"},
        {"id": 3, "name": "Joint"},
    ]
    sources = [
        {"id": 1, "name": "Interactive IL"},
        {"id": 2, "name": "One Zero"},
        {"id": 3, "name": "Blink"},
    ]
    op.bulk_insert(trade_owners_table, owners)
    op.bulk_insert(trade_sources_table, sources)

    # 4. Populate association table
    associations = [
        # Interactive IL -> Daniel, Shachar, Joint
        {"source_id": 1, "owner_id": 1},
        {"source_id": 1, "owner_id": 2},
        {"source_id": 1, "owner_id": 3},
        # One Zero -> Daniel
        {"source_id": 2, "owner_id": 1},
        # Blink -> Daniel
        {"source_id": 3, "owner_id": 1},
    ]
    op.bulk_insert(source_owner_association_table, associations)

    # 5. Migrate existing data in trades table
    op.execute(
        """
        UPDATE trades SET
        trade_owner_id = CASE trade_type
            WHEN 'Personal' THEN 1 -- Map Personal to Daniel (ID 1)
            WHEN 'Joint' THEN 3    -- Map Joint to Joint (ID 3)
            WHEN 'Daniel' THEN 1   -- Handle if 'Daniel' already exists
            WHEN 'Shachar' THEN 2  -- Handle if 'Shachar' already exists
            ELSE NULL           -- Or raise error/set default
        END,
        trade_source_id = CASE source
            WHEN 'Interactive IL' THEN 1
            WHEN 'One Zero' THEN 2
            WHEN 'Blink' THEN 3
            ELSE NULL
        END
        WHERE trade_owner_id IS NULL OR trade_source_id IS NULL
    """
    )

    # 6. Migrate existing data in unrealized_holdings table
    op.execute(
        """
        UPDATE unrealized_holdings SET
        trade_owner_id = CASE trade_type
            WHEN 'Personal' THEN 1
            WHEN 'Joint' THEN 3
            WHEN 'Daniel' THEN 1
            WHEN 'Shachar' THEN 2
            ELSE NULL
        END,
        trade_source_id = CASE source
            WHEN 'Interactive IL' THEN 1
            WHEN 'One Zero' THEN 2
            WHEN 'Blink' THEN 3
            ELSE NULL
        END
        WHERE trade_owner_id IS NULL OR trade_source_id IS NULL
    """
    )

    # 7. Make FK columns non-nullable
    op.alter_column(
        "trades", "trade_owner_id", existing_type=sa.Integer(), nullable=False
    )
    op.alter_column(
        "trades", "trade_source_id", existing_type=sa.Integer(), nullable=False
    )
    op.alter_column(
        "unrealized_holdings",
        "trade_owner_id",
        existing_type=sa.Integer(),
        nullable=False,
    )
    op.alter_column(
        "unrealized_holdings",
        "trade_source_id",
        existing_type=sa.Integer(),
        nullable=False,
    )

    # 8. Add Foreign Key constraints
    op.create_foreign_key(
        "fk_trade_source", "trades", "trade_sources", ["trade_source_id"], ["id"]
    )
    op.create_foreign_key(
        "fk_trade_owner", "trades", "trade_owners", ["trade_owner_id"], ["id"]
    )
    op.create_foreign_key(
        "fk_holding_source",
        "unrealized_holdings",
        "trade_sources",
        ["trade_source_id"],
        ["id"],
    )
    op.create_foreign_key(
        "fk_holding_owner",
        "unrealized_holdings",
        "trade_owners",
        ["trade_owner_id"],
        ["id"],
    )
    op.create_foreign_key(
        "fk_assoc_owner",
        "source_owner_association",
        "trade_owners",
        ["owner_id"],
        ["id"],
    )
    op.create_foreign_key(
        "fk_assoc_source",
        "source_owner_association",
        "trade_sources",
        ["source_id"],
        ["id"],
    )

    # 9. Drop old columns
    op.drop_column("trades", "trade_type")
    op.drop_column("trades", "source")
    op.drop_column("unrealized_holdings", "trade_type")
    op.drop_column("unrealized_holdings", "source")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Add old columns back (nullable first)
    op.add_column(
        "unrealized_holdings",
        sa.Column("source", mysql.VARCHAR(length=100), nullable=True),
    )
    op.add_column(
        "unrealized_holdings",
        sa.Column("trade_type", mysql.VARCHAR(length=50), nullable=True),
    )
    op.add_column(
        "trades", sa.Column("source", mysql.VARCHAR(length=100), nullable=True)
    )
    op.add_column(
        "trades", sa.Column("trade_type", mysql.VARCHAR(length=50), nullable=True)
    )

    # *** Add data migration back from IDs to strings if necessary (complex, often omitted) ***
    # Example (might need refinement):
    # op.execute("""
    #     UPDATE trades t JOIN trade_owners o ON t.trade_owner_id = o.id
    #     JOIN trade_sources s ON t.trade_source_id = s.id
    #     SET t.trade_type = o.name, t.source = s.name
    # """)
    # op.execute("""
    #     UPDATE unrealized_holdings h JOIN trade_owners o ON h.trade_owner_id = o.id
    #     JOIN trade_sources s ON h.trade_source_id = s.id
    #     SET h.trade_type = o.name, h.source = s.name
    # """)

    # Drop FK constraints first
    op.drop_constraint("fk_trade_source", "trades", type_="foreignkey")
    op.drop_constraint("fk_trade_owner", "trades", type_="foreignkey")
    op.drop_constraint("fk_holding_source", "unrealized_holdings", type_="foreignkey")
    op.drop_constraint("fk_holding_owner", "unrealized_holdings", type_="foreignkey")
    op.drop_constraint("fk_assoc_owner", "source_owner_association", type_="foreignkey")
    op.drop_constraint(
        "fk_assoc_source", "source_owner_association", type_="foreignkey"
    )

    # Drop new FK columns
    op.drop_column("unrealized_holdings", "trade_source_id")
    op.drop_column("unrealized_holdings", "trade_owner_id")
    op.drop_column("trades", "trade_source_id")
    op.drop_column("trades", "trade_owner_id")

    # Drop new tables
    op.drop_table("source_owner_association")
    op.drop_table("trade_sources")
    op.drop_table("trade_owners")
