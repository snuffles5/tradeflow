"""Add realized PnL columns to holdings

Revision ID: bec897393293
Revises: 48f096597be3
Create Date: 2025-04-28 22:09:53.968242

"""
import sqlalchemy as sa
from alembic import op


# revision identifiers, used by Alembic.
revision = "bec897393293"
down_revision = "48f096597be3"
branch_labels = None
depends_on = None


def upgrade():
    # Add the new columns (nullable)
    op.add_column(
        "unrealized_holdings", sa.Column("realized_pnl", sa.Float(), nullable=True)
    )
    op.add_column(
        "unrealized_holdings",
        sa.Column("realized_pnl_percentage", sa.Float(), nullable=True),
    )

    # Backfill data using MySQL-compatible UPDATE JOIN syntax
    conn = op.get_bind()
    conn.execute(
        sa.text(
            """
        UPDATE unrealized_holdings uh
        JOIN (
            SELECT
                h.id AS holding_id,
                SUM(CASE WHEN t.transaction_type = 'Buy'
                THEN t.quantity * t.price_per_unit ELSE 0 END) AS total_buy_cost,
                SUM(CASE WHEN t.transaction_type = 'Sell'
                THEN t.quantity * t.price_per_unit ELSE 0 END) AS total_sell_value
            FROM unrealized_holdings h
            JOIN trades t ON h.id = t.holding_id
            WHERE h.net_quantity = 0 AND h.deleted_at
            IS NOT NULL -- Filter for closed holdings
            GROUP BY h.id
        ) cht ON uh.id = cht.holding_id
        SET
            uh.realized_pnl = cht.total_sell_value - cht.total_buy_cost,
            uh.realized_pnl_percentage = CASE
                WHEN cht.total_buy_cost > 0
                THEN ((cht.total_sell_value - cht.total_buy_cost) / cht.total_buy_cost) * 100
                ELSE 0
            END;
    """
        )
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("unrealized_holdings", "realized_pnl_percentage")
    op.drop_column("unrealized_holdings", "realized_pnl")
    # ### end Alembic commands ###
